# CircleCI configuration file
# Ref: https://circleci.com/docs/2.0/configuration-reference/
version: 2.1

jobs:
  dep:
    docker:
      - image: circleci/golang:1.16
        environment:
          GO111MODULE: "on"
    working_directory: /go/src/github.com/hypnoglow/helm-s3
    steps:
      - checkout
      - run: make deps
      - persist_to_workspace:
          root: /go/src/github.com/hypnoglow
          paths:
            - helm-s3
  test-install:
    docker:
      - image: circleci/buildpack-deps:stretch-curl
    working_directory: /tmp
    steps:
      - run:
          name: Install helm
          command: |
            tar_filename="helm-v3.4.0-linux-amd64.tar.gz"
            checksum_filename="helm-v3.4.0-linux-amd64.tar.gz.sha256sum"
            curl -sSL https://get.helm.sh/${tar_filename} -O
            curl -sSL https://get.helm.sh/${checksum_filename} -O
            cat ${checksum_filename} | sha256sum -c
            tar xzf ${tar_filename}
            sudo mv linux-amd64/helm /usr/local/bin/helm
            rm -rf linux-amd64 ${tar_filename} ${checksum_filename}
      - run:
          name: Install helm-s3 plugin
          command: |
            sudo apt-get install -y make

            version="${CIRCLE_SHA1}"
            export HELM_S3_PLUGIN_NO_INSTALL_HOOK=true
            if [ -n "${CIRCLE_TAG}" ]; then
              version="${CIRCLE_TAG#v*}"
              export HELM_S3_PLUGIN_NO_INSTALL_HOOK=
            fi

            echo "Check installation of version ${version}"
            helm plugin install https://github.com/hypnoglow/helm-s3.git --version ${version}
  release:
    docker:
      - image: circleci/golang:1.16
        environment:
          GO111MODULE: "on"
          GOFLAGS: "-mod=vendor"
    working_directory: /go/src/github.com/hypnoglow/helm-s3
    steps:
      - attach_workspace:
          at: /go/src/github.com/hypnoglow
      - deploy:
          name: goreleaser
          command: |
            if [ -n "$CIRCLE_TAG" ]; then
              curl -sL https://git.io/goreleaser | bash
            fi

workflows:
  version: 2
  # test-pipeline runs on each push and merge, and does not run on tags.
  test-pipeline:
    jobs:
      - dep
      - test-install:
          filters:
            branches:
              only: master
  # release-pipeline runs only on tags.
  release-pipeline:
    jobs:
      - dep:
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
      - release:
          requires:
            - dep
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
      - test-install:
          requires:
            - release
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
